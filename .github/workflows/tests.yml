name: Tests

on:
    push:
        branches: [main]
    pull_request:
        branches: [main, "release/*"]

jobs:
    tests:
        name: ${{ matrix.session }} ${{ matrix.python }} / ${{ matrix.os }}
        runs-on: ${{ matrix.os }}
        strategy:
            fail-fast: false
            matrix:
                include:
                    - { python: "3.9", os: "ubuntu-latest", session: "pre-commit" }
                    - { python: "3.9", os: "ubuntu-latest", session: "mypy" }
                    - { python: "3.9", os: "ubuntu-latest", session: "tests_not_slow" }
                    - { python: "3.9", os: "ubuntu-latest", session: "xdoctest" }
                    - { python: "3.9", os: "ubuntu-latest", session: "docs-build" }
                    # - { python: "3.9", os: "macos-latest", session: "tests_not_slow" }
                    # - { python: "3.9", os: "windows-latest", session: "tests_not_slow" }
                    # - { python: "3.9", os: "ubuntu-latest", session: "safety" }
                    # - { python: "3.9", os: "ubuntu-latest", session: "typeguard" }

        env:
            FORCE_COLOR: "1"
            PRE_COMMIT_COLOR: "always"

        steps:
            #----------------------------------------------
            #       check-out repo and set-up python
            #----------------------------------------------
            - name: Check out the repository
              uses: actions/checkout@v4
            - name: Set up Python ${{ matrix.python }}
              id: setup-python
              uses: actions/setup-python@v5
              with:
                  python-version: ${{ matrix.python }}

            #----------------------------------------------
            #  -----  install & configure poetry  -----
            #----------------------------------------------
            - name: Install Poetry
              uses: snok/install-poetry@v1
              with:
                  version: latest
                  virtualenvs-create: true
                  virtualenvs-in-project: true
                  installer-parallel: true
                  plugins: poetry-plugin-export

            #----------------------------------------------
            #       load cached venv if cache exists
            #----------------------------------------------
            - name: Load cached venv
              id: cached-poetry-dependencies
              uses: actions/cache@v4
              with:
                  path: .venv
                  key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

            #----------------------------------------------
            # install dependencies if cache does not exist
            #----------------------------------------------
            - name: Install dependencies
              if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
              run: poetry install --with dev --no-interaction --no-root

            #----------------------------------------------
            # install root project, if required
            #----------------------------------------------
            - name: Install project
              run: poetry install --no-interaction

            #----------------------------------------------
            #  -----  pre-commit session  -----
            #----------------------------------------------
            - name: Compute pre-commit cache key
              if: always() && matrix.session == 'pre-commit'
              id: pre-commit-cache
              shell: python
              run: |
                  import hashlib
                  import sys
                  python = "py{}.{}".format(*sys.version_info[:2])
                  payload = sys.version.encode() + sys.executable.encode()
                  digest = hashlib.sha256(payload).hexdigest()
                  result = "${{ runner.os }}-{}-{}-pre-commit".format(python, digest[:8])
                  print("::set-output name=result::{}".format(result))

            - name: Restore pre-commit cache
              uses: actions/cache@v4
              if: always() && matrix.session == 'pre-commit'
              with:
                  path: ~/.cache/pre-commit
                  key: ${{ steps.pre-commit-cache.outputs.result }}-${{ hashFiles('.pre-commit-config.yaml') }}
                  restore-keys: |
                      ${{ steps.pre-commit-cache.outputs.result }}-

            - name: Run pre-commits
              if: always() && matrix.session == 'pre-commit'
              uses: pre-commit/action@v3.0.1
              with:
                  extra_args: --all-files --hook-stage=manual --show-diff-on-failure

            #----------------------------------------------
            #              run test suite
            #----------------------------------------------
            - name: Run tests with coverage
              if: always() && matrix.session == 'tests_not_slow'
              run: |
                  source .venv/bin/activate
                  pytest -m "not slow" --cov --cov-report term-missing --cov-report xml:coverage.xml

            #----------------------------------------------
            #          upload coverage report
            #----------------------------------------------
            - name: Upload coverage reports to Codecov
              if: always() && matrix.session == 'tests_not_slow'
              uses: codecov/codecov-action@v4
              with:
                  files: ./coverage.xml
                  fail_ci_if_error: true
              env:
                  CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

            #----------------------------------------------
            #              upload documentation
            #----------------------------------------------
            - name: Upload documentation
              if: matrix.session == 'docs-build'
              uses: actions/upload-artifact@v4
              with:
                  name: docs
                  path: docs/_build
